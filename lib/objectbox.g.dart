// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/task_item_model.dart';
import 'model/task_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4926069602657670596),
      name: 'TaskModel',
      lastPropertyId: const IdUid(3, 6273106539344955982),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6386928414609437017),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3893414727451222905),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6273106539344955982),
            name: 'taskDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'taskItems', srcEntity: 'TaskItemModel', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 3277576359980171649),
      name: 'TaskItemModel',
      lastPropertyId: const IdUid(5, 7386335227885736038),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1813029860896467769),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1857729993852180792),
            name: 'itemName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6677118901348514979),
            name: 'itemDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3920299247088975502),
            name: 'itemDateTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7386335227885736038),
            name: 'taskModelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 368628462973739050),
            relationTarget: 'TaskModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 3277576359980171649),
      lastIndexId: const IdUid(1, 368628462973739050),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TaskModel: EntityDefinition<TaskModel>(
        model: _entities[0],
        toOneRelations: (TaskModel object) => [],
        toManyRelations: (TaskModel object) => {
              RelInfo<TaskItemModel>.toOneBacklink(5, object.id,
                      (TaskItemModel srcObject) => srcObject.taskModel):
                  object.taskItems
            },
        getId: (TaskModel object) => object.id,
        setId: (TaskModel object, int id) {
          object.id = id;
        },
        objectToFB: (TaskModel object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.taskDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskModel(
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              taskDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.taskItems,
              store,
              RelInfo<TaskItemModel>.toOneBacklink(5, object.id,
                  (TaskItemModel srcObject) => srcObject.taskModel),
              store.box<TaskModel>());
          return object;
        }),
    TaskItemModel: EntityDefinition<TaskItemModel>(
        model: _entities[1],
        toOneRelations: (TaskItemModel object) => [object.taskModel],
        toManyRelations: (TaskItemModel object) => {},
        getId: (TaskItemModel object) => object.id,
        setId: (TaskItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (TaskItemModel object, fb.Builder fbb) {
          final itemNameOffset = fbb.writeString(object.itemName);
          final itemDescriptionOffset = fbb.writeString(object.itemDescription);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, itemNameOffset);
          fbb.addOffset(2, itemDescriptionOffset);
          fbb.addInt64(3, object.itemDateTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.taskModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskItemModel(
              itemName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              itemDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              itemDateTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.taskModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.taskModel.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TaskModel] entity fields to define ObjectBox queries.
class TaskModel_ {
  /// see [TaskModel.id]
  static final id = QueryIntegerProperty<TaskModel>(_entities[0].properties[0]);

  /// see [TaskModel.description]
  static final description =
      QueryStringProperty<TaskModel>(_entities[0].properties[1]);

  /// see [TaskModel.taskDate]
  static final taskDate =
      QueryIntegerProperty<TaskModel>(_entities[0].properties[2]);
}

/// [TaskItemModel] entity fields to define ObjectBox queries.
class TaskItemModel_ {
  /// see [TaskItemModel.id]
  static final id =
      QueryIntegerProperty<TaskItemModel>(_entities[1].properties[0]);

  /// see [TaskItemModel.itemName]
  static final itemName =
      QueryStringProperty<TaskItemModel>(_entities[1].properties[1]);

  /// see [TaskItemModel.itemDescription]
  static final itemDescription =
      QueryStringProperty<TaskItemModel>(_entities[1].properties[2]);

  /// see [TaskItemModel.itemDateTime]
  static final itemDateTime =
      QueryIntegerProperty<TaskItemModel>(_entities[1].properties[3]);

  /// see [TaskItemModel.taskModel]
  static final taskModel =
      QueryRelationToOne<TaskItemModel, TaskModel>(_entities[1].properties[4]);
}
